- name: install parted for partition management
  package:
    name: parted
    state: present

- when: has_efi
  module_defaults:
    parted:
      state: present
      device: "{{ os_disk }}"
      label: gpt
  block:
    - parted:
        number: 1
        part_end: 1GiB
        flags: esp
        name: BOOT

    - filesystem:
        dev: /dev/disk/by-partlabel/BOOT
        fstype: vfat
        opts: -n BOOT

    - parted:
        number: 2
        part_start: 1GiB
        name: LINUX

- when: not has_efi
  module_defaults:
    parted:
      state: present
      device: "{{ os_disk }}"
      label: gpt
  block:
    - parted:
        number: 3
        part_end: 1MiB
        flags: bios_grub

    - parted:
        number: 1
        part_start: 1MiB
        part_end: 1GiB
        name: BOOT

    - filesystem:
        dev: /dev/disk/by-partlabel/BOOT
        fstype: vfat
        opts: -n BOOT

    - parted:
        number: 2
        part_start: 1GiB
        name: LINUX

- when: encryption == 'none'
  block:
    - lvg:
        vg: rootvol
        pvs: /dev/disk/by-partlabel/LINUX

- when: encryption == 'disk'
  block:
    - block:
        - command: cp -a /etc/keyfile /tmp/ creates=/tmp/keyfile
          
      rescue:
        - shell: head -c 4096 /dev/urandom > /tmp/keyfile creates=/tmp/keyfile

    - block:
        - name: check if partition is already formatted as luks
          command: cryptsetup isLuks /dev/disk/by-partlabel/LINUX
          
      rescue:
        - name: format the luks device
          command: cryptsetup luksFormat /dev/disk/by-partlabel/Linux /tmp/keyfile -q
          
        - name: add user password to disk 
          expect:
            command: cryptsetup luksFormat /dev/disk/by-partlabel/Linux --key-file /tmp/keyfile -q
            responses:
              new passphrase: "{{ user_password }}"

    - block:
        - shell: dmsetup ls | grep ^root\s
          
      rescue:
        - command: cryptsetup open /dev/disk/by-partlabel/LINUX root --key-file /tmp/keyfile

    - crypttab:
        name: root
        backing_device: /dev/disk/by-partlabel/LINUX
        opts: discard
        path: /tmp/crypttab.initramfs
        state: present
        password: none

    - lvg:
        vg: rootvol
        pvs: /dev/mapper/root

- name: create a swap partition the same size as real memory (for hibernation, etc.)
  lvol:
    vg: rootvol
    lv: swap
    size: "{{ ansible_memory_mb.real.total }}"

- name: create a root partition with the rest of the free space
  lvol:
    vg: rootvol
    lv: root
    size: 100%FREE

- name: create a root filesystem on the root partition
  filesystem:
    dev: /dev/rootvol/root
    fstype: "{{ root_fstype }}"
    opts: -L ROOT

- name: mount
  mount:
    state: mounted
    src: /dev/disk/by-label/ROOT
    path: /mnt/
    fstype: auto

- name: bootstrap the new filesystem 
  command: pacstrap /mnt

- name: copy encryption files from /tmp into the filesystem
  command: cp -aT /tmp/{{ item }} /mnt/etc/{{ item }}
  loop:
    - crypttab.initramfs
    - keyfile

- name: install ansible on the new root
  command: arch-chroot /mnt pacman -S --noconfirm ansible

- name: pull the root's configuration 
  expect:
    command: arch-chroot /mnt ansible-pull -U {{ repo_url }}
    responses: "{{ pull_expect }}"
